from __future__ import division
from definitions_numpy import *
import numpy as np
from qutip import Qobj, identity, tensor
import matplotlib.pyplot as plt


 # List of 8D Gell-Mann matrix
Gell_Mann_np_array8 = Gell_Mann(4)
for x in range(len(Gell_Mann_np_array8)):
	Gell_Mann_np_array8[x] = tensor(identity(2), Gell_Mann_np_array8[x]).full()

# List for errors
E_np_list = []
for k in range(0, 3):
	E_np_list.append(E_np(k, 1/1024))




phi = [4.762815797201901, 3.0030797283097694, 2.3002983311738294, 1.8107355659962843, 2.234768861986662, 0.8880802795405287, 0.6990774476882087, 0.9505866717064115, 5.210862891000058, 5.71410517126595, 6.275546251168045, 1.817757585740357, 2.498050396865478, 1.219779927476257, 0.6324427734683677, 3.6499051384967265, 2.61058349986131, 1.6538444641528631, 2.1549168546357893, 2.0336885961032363, 3.4212577668974524, 1.8585442471827343, 1.114565894312593, 2.0696460574710467, 0.3034236121126904, 1.2436097298475253, 0.5993017151499396, 2.731927013920969, 2.9451076440538535, 0.8240422546194267, 2.0214952443634413, 0.06914867705319128, 5.06348726947566, 1.4392449384452337, 5.401776905422341, 6.146098566025535, 4.821940846772457]
cos = [-0.7990550344307653, -0.91087513741979531, 0.92543502587619619, -0.99641897531666757, 0.034011679452355705, 0.83425450305902804, -0.64484188116668495, -0.077211419965364583, 0.70783391731522127, 0.93868191469102702, -0.96890788184776599, 0.79615105290837529, 0.8641569763404835, -0.9999179829255279, 0.59180701302514238, 0.38396459958663937, -0.98119132735087355, 0.8385211872808132, -0.8833399549809868, -0.9994827247946706, -0.5440955044613552, 0.19044121720729648, -0.16890301915595332, -0.14663255743231604, -0.99132872147910178, -0.9384362546056485, 0.30753606841442876, -0.79096733286634735, 0.56272125802419792]
sin = [0.60125789138343, 0.41268206167759341, 0.37890633787457828, 0.084553093550042632, 0.99942143546195272, 0.55137956447961878, 0.76431600028614544, 0.99701474243209265, 0.7063788965549499, 0.34478437179197585, 0.24742173811788551, 0.60509792674647744, 0.50322233678769979, -0.012807319084950477, 0.80607968547424569, 0.9233478143496479, 0.19303776607552964, 0.5448689920349435, 0.4687328918842673, -0.0321602679873909, 0.8390232905140019, 0.98169860078773841, 0.98563267504684704, 0.98919102963020167, 0.13140534985535923, 0.3454524512023652, 0.95153642422357942, 0.6118583809496253, 0.82664671158098979]


# for x in range(len(phi)):
# 	phi[x] = 0



# p0_list = []

# for x in range(len(phi)):
# 	p0_partlist = []
# 	phi_space = list(phi)
# 	phase = phi_space[x]
# 	for n in range(-16, 17):
# 		phi_space[x] = phase + (n * np.pi / 8)
# 		U = np.array(U_(cos, sin, phi_space))
# 		U_dag = np.conj(U.transpose())

# 		# Create list E'_k
# 		E_U_k = []
# 		for k in range(0, 3):
# 			E_U_k.append(np.dot(U_dag, np.dot(E_np_list[k], U)))

# 		p_0 = p0(U, E_U_k, Gell_Mann_np_array8)
# 		p0_partlist.append(np.real(p_0)/ 4)
# 	p0_list.append(p0_partlist)

# for x in range(len(cos)):
# 	p0_partlist = []
# 	cos_space = list(cos)
# 	sin_space = list(sin)
# 	theta = np.arccos(cos_space[x])
# 	for n in range(-16, 17):
# 		cos_space[x] = np.cos(theta + (n * np.pi / 8))
# 		sin_space[x] = np.sin(theta + (n * np.pi / 8))
# 		U = np.array(U_(cos_space, sin_space, phi))
# 		U_dag = np.conj(U.transpose())

# 		# Create list E'_k
# 		E_U_k = []
# 		for k in range(0, 3):
# 			E_U_k.append(np.dot(U_dag, np.dot(E_np_list[k], U)))

# 		p_0 = p0(U, E_U_k, Gell_Mann_np_array8)
# 		print x, n * np.pi / 8, np.real(p_0)
# 		p0_partlist.append(np.real(p_0)/ 4)
# 	p0_list.append(p0_partlist)



# x = []
# for n in range(-16, 17):
# 	x.append((n * np.pi / 8))

# print x, p0_list[0]

# for z in range(len(cos)):
# 	plt.plot(x, p0_list[z])

# plt.axis([-2 * np.pi, 2 * np.pi, 0.996, 1.001])
# plt.show()


#


# # Make U
# U = np.array(U_(cos, sin, phi))
# U_dag = np.conj(U.transpose())

# # Create list E'_k
# E_U_k = []
# for k in range(0, 3):
# 	E_U_k.append(np.dot(U_dag, np.dot(E_np_list[k], U)))

# p_0 = p0(U, E_U_k, Gell_Mann_np_array8)

# print np.real(p_0)
epsilon = []
for e in range(11):
	epsilon.append(e)

# # Ising
# U_hand = [1.0000021457672055, 0.99999402686754268, 0.99996967074075704, 0.99992907910346385, 0.99987225481668474, 0.9997992018858527, 0.99970992546080895, 0.99960443183580394, 0.99948272844949748, 0.99934482388495771, 0.99919072786966356]
# U_DFS = [0.99991813918644923, 0.99991150075076263, 0.99989158600918882, 0.99985839665818355, 0.99981193552517666, 0.99975220656856423, 0.99967921487771805, 0.99959296667297914, 0.99949346930565908, 0.99938073125804128, 0.99925476214338094]
# U_Ising = [0.99984552417970007, 0.99984306671519541, 0.99983569460780553, 0.99982340871590825, 0.99980621047013019, 0.99978410187335232, 0.99975708550070352, 0.99972516449956494, 0.99968834258957029, 0.99964662406260163, 0.99960001378279562]

# EM
U_hand = [1.0000021457672055, 0.99996964647769304, 0.99987215270995466, 0.999709676766389, 0.99948223915099488, 0.99918986856936831, 0.99883260192870449, 0.99841048433780044, 0.99792356910704916, 0.99737191774844547, 0.99675559997557983]
U_DFS = [0.99991813918644923, 0.99989197325569934, 0.99981347927998343, 0.99968266870889044, 0.99949956062507361, 0.99926418174424436, 0.99897656641517896, 0.99863675661970996, 0.99824480197273335, 0.99780075972220506, 0.99730469474914207]
U_EM = [0.99935626360637575, 0.99935289966787944, 0.99934280871910763, 0.99932599336021655, 0.99930245792479777, 0.99927220847987974, 0.99923525282592718, 0.99919160049684319, 0.99914126275996584, 0.99908425261607103, 0.99902058479937195]

plt.plot(epsilon, U_hand)
plt.plot(epsilon, U_DFS)
plt.plot(epsilon, U_EM)
plt.show()